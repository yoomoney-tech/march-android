ext {

    minSdkVersion = 19
    targetSdkVersion = 28
    compileSdkVersion = 28

    coroutines_version = '1.3.5'
    mockitoKotlin = '2.2.0'
    lifecycle = '2.2.0'

    final PARTS_VERSION_TOTAL_COUNT = 3
    final PARTS_VERSION_POSITION_MAJOR = 0
    final PARTS_VERSION_POSITION_MINOR = 1
    final PARTS_VERSION_POSITION_PATCH = 2

    File versionFile = file(".versionName")
    List<Integer> versionParts
    if (versionFile.exists()) {
        versionParts = versionFile.readLines().first().split("\\.").collect { partVersion ->
            String errorNumberFormatMessage = "Parts of version must be number"
            try {
                Integer.parseInt(partVersion)
            } catch (NumberFormatException ex) {
                throw ex(errorNumberFormatMessage)
            }
        }
        if (versionParts.size() < PARTS_VERSION_TOTAL_COUNT)
            throw new IllegalStateException(".versionName file must contains at least major.minor.patch" +
                    "e.g. 5.8.0")
    } else throw new IllegalStateException(
            "Can't find .version file.\nCreate .versionName file in root of project " +
                    "and write app version in the format major.minor.patch(e.g. 5.8.0).\n"
    )

    versionMajor = versionParts[PARTS_VERSION_POSITION_MAJOR]
    versionMinor = versionParts[PARTS_VERSION_POSITION_MINOR]
    versionPatch = versionParts[PARTS_VERSION_POSITION_PATCH]

    File versionCodeFile = file(".versionCode")
    Integer versionCode
    if (versionCodeFile.exists()) {
        try {
            versionCode = Integer.parseInt(versionCodeFile.text)
        } catch (NumberFormatException ex) {
            throw ex(errorNumberFormatMessage)
        }
    } else throw new IllegalStateException(
            "Can't find .version file.\nCreate .versionCode file in root of project " +
                    "and write code version in the format number(e.g. 1).\n"
    )

    getAppVersionCode = { versionCode }

    getAppVersionName = {
        "$versionMajor.$versionMinor.$versionPatch"
    }

    zipReleaseName = {
        "march-${getAppVersionName()}-${getTeamcityBuildconfName()}-${getBuildNumber()}-${getGitHash()}"
    }
}